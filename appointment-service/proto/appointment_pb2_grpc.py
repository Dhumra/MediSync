# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import appointment_pb2 as appointment__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in appointment_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AppointmentFrontendBridgeStub(object):
    """==========================
    🌐 Service 1: Frontend Layer
    ==========================

    Frontend → AppointmentService communication layer
    Used by frontend-service to interact with appointment-service via gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchAvailableAppointments = channel.unary_unary(
                '/appointment.AppointmentFrontendBridge/FetchAvailableAppointments',
                request_serializer=appointment__pb2.AppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.AppointmentList.FromString,
                _registered_method=True)
        self.RequestAppointmentBooking = channel.unary_unary(
                '/appointment.AppointmentFrontendBridge/RequestAppointmentBooking',
                request_serializer=appointment__pb2.BookAppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.Confirmation.FromString,
                _registered_method=True)
        self.RequestAppointmentCancellation = channel.unary_unary(
                '/appointment.AppointmentFrontendBridge/RequestAppointmentCancellation',
                request_serializer=appointment__pb2.CancelAppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.Confirmation.FromString,
                _registered_method=True)


class AppointmentFrontendBridgeServicer(object):
    """==========================
    🌐 Service 1: Frontend Layer
    ==========================

    Frontend → AppointmentService communication layer
    Used by frontend-service to interact with appointment-service via gRPC
    """

    def FetchAvailableAppointments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAppointmentBooking(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestAppointmentCancellation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppointmentFrontendBridgeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchAvailableAppointments': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAvailableAppointments,
                    request_deserializer=appointment__pb2.AppointmentRequest.FromString,
                    response_serializer=appointment__pb2.AppointmentList.SerializeToString,
            ),
            'RequestAppointmentBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAppointmentBooking,
                    request_deserializer=appointment__pb2.BookAppointmentRequest.FromString,
                    response_serializer=appointment__pb2.Confirmation.SerializeToString,
            ),
            'RequestAppointmentCancellation': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAppointmentCancellation,
                    request_deserializer=appointment__pb2.CancelAppointmentRequest.FromString,
                    response_serializer=appointment__pb2.Confirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'appointment.AppointmentFrontendBridge', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('appointment.AppointmentFrontendBridge', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AppointmentFrontendBridge(object):
    """==========================
    🌐 Service 1: Frontend Layer
    ==========================

    Frontend → AppointmentService communication layer
    Used by frontend-service to interact with appointment-service via gRPC
    """

    @staticmethod
    def FetchAvailableAppointments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentFrontendBridge/FetchAvailableAppointments',
            appointment__pb2.AppointmentRequest.SerializeToString,
            appointment__pb2.AppointmentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestAppointmentBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentFrontendBridge/RequestAppointmentBooking',
            appointment__pb2.BookAppointmentRequest.SerializeToString,
            appointment__pb2.Confirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestAppointmentCancellation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentFrontendBridge/RequestAppointmentCancellation',
            appointment__pb2.CancelAppointmentRequest.SerializeToString,
            appointment__pb2.Confirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AppointmentServiceStub(object):
    """==========================
    🧠 Service 2: Backend Layer
    ==========================

    AppointmentService internal logic layer
    This can be called by tests, admin dashboards, or internal service orchestration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LookupAppointment = channel.unary_unary(
                '/appointment.AppointmentService/LookupAppointment',
                request_serializer=appointment__pb2.AppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.AppointmentList.FromString,
                _registered_method=True)
        self.BookAppointment = channel.unary_unary(
                '/appointment.AppointmentService/BookAppointment',
                request_serializer=appointment__pb2.BookAppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.Confirmation.FromString,
                _registered_method=True)
        self.CancelAppointment = channel.unary_unary(
                '/appointment.AppointmentService/CancelAppointment',
                request_serializer=appointment__pb2.CancelAppointmentRequest.SerializeToString,
                response_deserializer=appointment__pb2.Confirmation.FromString,
                _registered_method=True)


class AppointmentServiceServicer(object):
    """==========================
    🧠 Service 2: Backend Layer
    ==========================

    AppointmentService internal logic layer
    This can be called by tests, admin dashboards, or internal service orchestration
    """

    def LookupAppointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BookAppointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelAppointment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AppointmentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LookupAppointment': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupAppointment,
                    request_deserializer=appointment__pb2.AppointmentRequest.FromString,
                    response_serializer=appointment__pb2.AppointmentList.SerializeToString,
            ),
            'BookAppointment': grpc.unary_unary_rpc_method_handler(
                    servicer.BookAppointment,
                    request_deserializer=appointment__pb2.BookAppointmentRequest.FromString,
                    response_serializer=appointment__pb2.Confirmation.SerializeToString,
            ),
            'CancelAppointment': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelAppointment,
                    request_deserializer=appointment__pb2.CancelAppointmentRequest.FromString,
                    response_serializer=appointment__pb2.Confirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'appointment.AppointmentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('appointment.AppointmentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AppointmentService(object):
    """==========================
    🧠 Service 2: Backend Layer
    ==========================

    AppointmentService internal logic layer
    This can be called by tests, admin dashboards, or internal service orchestration
    """

    @staticmethod
    def LookupAppointment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentService/LookupAppointment',
            appointment__pb2.AppointmentRequest.SerializeToString,
            appointment__pb2.AppointmentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BookAppointment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentService/BookAppointment',
            appointment__pb2.BookAppointmentRequest.SerializeToString,
            appointment__pb2.Confirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelAppointment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/appointment.AppointmentService/CancelAppointment',
            appointment__pb2.CancelAppointmentRequest.SerializeToString,
            appointment__pb2.Confirmation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
