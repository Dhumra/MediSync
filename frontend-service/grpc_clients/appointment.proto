syntax = "proto3";

package appointment;

// ==========================
// üåê Service 1: Frontend Layer
// ==========================

// Frontend ‚Üí AppointmentService communication layer
// Used by frontend-service to interact with appointment-service via gRPC
service AppointmentFrontendBridge {
  rpc FetchAvailableAppointments(AppointmentRequest) returns (AppointmentList);
  rpc RequestAppointmentBooking(BookAppointmentRequest) returns (Confirmation);
  rpc RequestAppointmentCancellation(CancelAppointmentRequest) returns (Confirmation);
}

// ==========================
// üß† Service 2: Backend Layer
// ==========================

// AppointmentService internal logic layer
// This can be called by tests, admin dashboards, or internal service orchestration
service AppointmentService {
  rpc LookupAppointment(AppointmentRequest) returns (AppointmentList);
  rpc BookAppointment(BookAppointmentRequest) returns (Confirmation);
  rpc CancelAppointment(CancelAppointmentRequest) returns (Confirmation);
}


// =====================
// üì¶ Messages
// =====================

// Request: Client wants to view available appointments
message AppointmentRequest {
  int32 doctor_id = 1;
  string appointment_date = 2; // Format: YYYY-MM-DD
}

// Response: A single appointment slot
message AppointmentSlot {
  int32 slot_id = 1;
  int32 doctor_id = 2;
  string appointment_date = 3;
  string appointment_time = 4; // Format: HH:MM (24-hour)
  bool is_available = 5;
}

// Response: A list of appointment slots
message AppointmentList {
  repeated AppointmentSlot slots = 1;
}

// Request: Client wants to book an appointment
message BookAppointmentRequest {
  int32 slot_id = 1;
  int32 user_id = 2;
}

// Request: Client wants to cancel a booking
message CancelAppointmentRequest {
  int32 slot_id = 1;
}

// Generic confirmation response
message Confirmation {
  bool success = 1;
  string message = 2;
}